// client/src/types/questionBankTypes.ts

// Corresponds to QuestionModel.ts on the backend
export interface IOption {
  _id?: string; // Optional because it's generated by DB for new options
  text: string;
  isCorrect: boolean;
}

export type QuestionType =
  | "multiple-choice-single"
  | "multiple-choice-multiple"
  | "true-false";

export interface IQuestion {
  _id: string;
  questionText: string;
  questionType: QuestionType;
  options: IOption[];
  categories: string[]; // From MenuItem categories or custom
  restaurantId: string;
  createdBy: "ai" | "manual";
  explanation?: string;
  createdAt: string;
  updatedAt: string;
  status: "active" | "pending_review" | "rejected";
}

// Main interface for a Question Bank document on the client-side
export interface IQuestionBank {
  _id: string;
  name: string;
  description?: string;
  restaurantId: string; // Assuming this is always populated or available
  sourceType: "SOP" | "MENU" | "MANUAL"; // Added sourceType
  sourceSopDocumentId?: string | null; // Added for SOP source
  sourceSopDocumentTitle?: string; // Added for SOP source, if backend provides it
  sourceMenuId?: string | null; // Added for Menu source
  sourceMenuName?: string; // Added for Menu source, if backend provides it
  categories: string[];
  questions: string[]; // Array of question IDs
  questionCount: number;
  createdAt: string; // Date as string
  updatedAt: string; // Date as string
  // createdBy?: string; // Optional: if you need to display who created it
}

// For creating a new question bank
export interface CreateQuestionBankData {
  name: string;
  description?: string;
}

// For updating a question bank
export interface UpdateQuestionBankData {
  name?: string;
  description?: string;
  categories?: string[]; // ADDED: To allow updating categories
  // questionIds?: string[]; // For managing questions within a bank later
}

// For AI Question Generation (mirrors backend AiGenerationParams, ommitting restaurantId)
export interface AiGenerationClientParams {
  categories: string[];
  targetQuestionCount: number;
  menuContext?: string;
  geminiModelName?: string;
  bankId?: string; // ADDED: To associate generated questions with a bank
}

// Specific AI params for creating bank from menu (subset of AiGenerationClientParams)
export interface MenuAiGenerationClientParams {
  targetQuestionCount?: number;
  // geminiModelName?: string;
  // selectedFocusAreas?: string[];
  // difficultyLevel?: string;
  // questionTypes?: string[];
}

// This will be the main type for creating any question bank from the client
export interface CreateQuestionBankClientData {
  name: string;
  description?: string;
  restaurantId: string; // Assuming client always knows this now

  sourceType: "MANUAL" | "MENU" | "SOP"; // Changed to uppercase

  // For Menu source
  sourceMenuId?: string;
  // selectedCategoryNames from menu are effectively the bank's initial categories
  categories?: string[]; // Used by menu and SOP source types for initial categories

  // For SOP source
  sourceSopDocumentId?: string;
  generationMethod?: "AI" | "MANUAL"; // MODIFIED to uppercase

  // Note: AI generation parameters for menu (like targetQuestionCount)
  // are not directly part of this top-level type anymore.
  // If createQuestionBankFromMenu service on backend handles AI params,
  // they would be passed there, not to the generic /question-banks endpoint directly.
}

// For creating an individual question manually (client-side)
export interface NewQuestionClientData {
  questionText: string;
  questionType: QuestionType;
  options: Omit<IOption, "_id">[];
  categories: string[];
  questionBankId: string;
}

// For updating an individual question (client-side)
// Note: questionType is generally not updated directly; delete and re-create if type change is needed.
export interface UpdateQuestionClientData {
  questionText?: string;
  questionType?: QuestionType;
  options?: Omit<IOption, "_id">[]; // Options might be entirely new or have existing _ids for merging on backend (if supported)
  categories?: string[];
  explanation?: string; // Ensure explanation is present
}

// Payload for the new AI Question Generation Process via /api/ai/generate-questions
export interface NewAiQuestionGenerationParams {
  bankId: string; // ADDED: To link generated questions to the correct bank
  menuId: string;
  categoriesToFocus: string[];
  questionFocusAreas: string[];
  targetQuestionCountPerItemFocus: number;
  questionTypes: string[];
  additionalContext?: string;
  itemIds?: string[];
}
