// client/src/types/questionBankTypes.ts

// Corresponds to QuestionModel.ts on the backend
export interface IOption {
  _id?: string; // Optional because it's generated by DB for new options
  text: string;
  isCorrect: boolean;
}

export type QuestionType =
  | "multiple-choice-single"
  | "multiple-choice-multiple"
  | "true-false";

export interface IQuestion {
  _id: string;
  questionText: string;
  questionType: QuestionType;
  options: IOption[];
  categories: string[]; // From MenuItem categories or custom
  restaurantId: string;
  createdBy: "ai" | "manual";
  difficulty?: "easy" | "medium" | "hard";
  createdAt: string;
  updatedAt: string;
}

// Corresponds to QuestionBankModel.ts on the backend
export interface IQuestionBank {
  _id: string;
  name: string;
  description?: string;
  restaurantId: string;
  questions: IQuestion[] | string[]; // Can be populated or just IDs
  questionCount: number;
  categories: string[]; // Aggregate from questions
  createdBy: string; // User ID
  createdAt: string;
  updatedAt: string;
}

// For creating a new question bank
export interface CreateQuestionBankData {
  name: string;
  description?: string;
}

// For updating a question bank
export interface UpdateQuestionBankData {
  name?: string;
  description?: string;
  // questionIds?: string[]; // For managing questions within a bank later
}

// For AI Question Generation (mirrors backend AiGenerationParams, ommitting restaurantId)
export interface AiGenerationClientParams {
  categories: string[];
  targetQuestionCount: number;
  menuContext?: string;
  geminiModelName?: string;
  bankId?: string; // ADDED: To associate generated questions with a bank
}

// Specific AI params for creating bank from menu (subset of AiGenerationClientParams)
export interface MenuAiGenerationClientParams {
  targetQuestionCount: number;
  geminiModelName?: string;
}

// Data for creating a question bank from a menu
export interface CreateQuestionBankFromMenuClientData {
  name: string;
  description?: string;
  menuId: string; // Menu ObjectId as string
  selectedCategoryNames: string[];
  generateAiQuestions?: boolean;
  aiParams?: MenuAiGenerationClientParams;
}

// For creating an individual question manually (client-side)
export interface NewQuestionClientData {
  questionText: string;
  questionType: QuestionType;
  options: Omit<IOption, "_id">[]; // Options for a new question won't have _id
  categories: string[];
  difficulty?: "easy" | "medium" | "hard";
  // restaurantId and createdBy are added by the backend or service layer calling createQuestion
}

// For updating an individual question (client-side)
// Note: questionType is generally not updated directly; delete and re-create if type change is needed.
export interface UpdateQuestionClientData {
  questionText?: string;
  questionType?: QuestionType;
  options?: Omit<IOption, "_id">[]; // Options might be entirely new or have existing _ids for merging on backend (if supported)
  categories?: string[];
  difficulty?: "easy" | "medium" | "hard";
}
